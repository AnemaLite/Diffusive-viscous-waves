// Ce programme reproduit l'expérience du papier de 2014 avec les PML. C'est le programme le plus abouti
include "colorhsv.idp";
load "iovtk"

real a = 450; // Paramètre pour le domaine C'est un carré pour le moment;
real L = 90; // Paramètre pour l'épaisseur du layer 

//Fonctions et paramètres 
real zeta = 100;
func zeta1 = zeta*((abs(abs(x)-a))/L - sin(2*pi*abs(abs(x)-a)/L)/(2*pi))*((abs(x) < a + L) & (abs(x) > a));
func zeta2 = zeta*((abs(abs(y)-a))/L - sin(2*pi*abs(abs(y)-a)/L)/(2*pi))*((abs(y) < a + L) & (abs(y) > a));

real t = 0;
real t0 = 0.05;
real freq = 30;
func real g(real t){
    return -2*((pi*freq)^2)*((2*(pi*freq)^2)*(t-t0)^2 - 1)*(exp(-((pi*freq)^2)*(t-t0)^2));
}
func f = 10000*exp(-((x-15)^2+(y-441)^2));
real theta = 0.25;
func c = 1600 ;//- 130*(y<60 & y>0)*(abs(x)<150) - 585*(y<60 & y>0)*(x > 150) -585*(y<60 & y>0)*(x < -150);
func gamma = 30*(y<60 & y>0)*(abs(x)<150) + 21.6*(y<60 & y>0)*(x > 150) + 21.6*(y<60 & y>0)*(x < -150);
func eta = 0;//158410*(y<60 & y>0)*(abs(x)<150) + 115532*(y<60 & y>0)*(x > 150) + 115532*(y<60 & y>0)*(x < -150);

//Maillage 

int nx = 330;
int ny = 330;
int nt = 600;
real T = 0.6;
real dt = T/nt;

real x0 = -a - L;
real x1 = a + L;
real y0 = -a - L;
real y1 = a + L;
border c01(t=0,1){x = -540; y = 540 - 480*t;label = 1;}
border c02(t=0,1){x = -540 + 2*540*t; y = 60;label = 2;}
border c03(t=0,1){x = 540; y = 60 + t*480;label = 3;}
border c04(t=0,1){x = 540 -2*540*t; y = 540;label = 4;}

border c05(t=0,1){x = -540; y = 60-60*t;label = 5;}
border c06(t=0,1){x = -540 + 2*540*t; y = 0;label = 6;}
border c07(t=0,1){x = 540; y = 0 + 60*t;label = 7;}

border c08(t=0,1){x = -540; y = 0 -540*t;label = 8;}
border c09(t=0,1){x = -540 + 2*540*t; y = -540;label = 9;}
border c10(t=0,1){x = 540; y = -540 + 540*t;label = 10;}
int n13 = 80; 
int n57 = floor(n13/8)*2;    // largeur du rectangle du milieu 
int n26 = 30*n57; // longueur du rectangle du milieu  
int n49 = floor(2.25*n13); 
int n810 = floor(1.125*n13);
mesh Th1 = buildmesh(c01(n13) + c02(n26) + c03(n13) + c04(n49) + c05(n57) + c06(n26) + c07(n57)+ c08(n810)+c09(n49)+ c10(n810));
mesh Th = square(nx,ny , [x0+(x1-x0)*x, y0+(y1-y0)*y],flags = 1);

//Definition de toutes les variables nécessaires 
fespace Vh(Th,P1); 

Vh u,u1,u0;
Vh psy,psy1;
Vh phi1x, phix;
Vh phi1y, phiy;
Vh v;

//Definition des différentes formes variationnelles. 

int n = 0;

problem calculu(u,v,init = n)
    = int2d(Th)(u*v/dt^2)
    + int2d(Th)(u0*v/dt^2)
    + int2d(Th)(-2*u1*v/dt^2)

    + int2d(Th)((zeta1+zeta2+gamma)*u*v/(2*dt))
    - int2d(Th)((zeta1+zeta2+gamma)*u0*v/(2*dt))

    + int2d(Th)((zeta1*zeta2 + gamma*(zeta1 + zeta2))*u1*v)

    + int2d(Th)(eta*(dx(u)*dx(v)+ dy(u)*dy(v))/(2*dt))
    - int2d(Th)(eta*(dx(u0)*dx(v)+ dy(u0)*dy(v))/(2*dt))
    
    + int2d(Th)(theta*(dx(u)*dx(v)+dy(u)*dy(v))*c^2)
    + int2d(Th)(theta*(dx(u0)*dx(v)+dy(u0)*dy(v))*c^2)
    + int2d(Th)((1-2*theta)*(dx(u1)*dx(v)+dy(u1)*dy(v))*c^2)

    +int2d(Th)(eta*(phi1x*dx(v)+phi1y*dy(v)))
    +int2d(Th)(c^2*(phi1x*dx(v)+phi1y*dy(v)))
    +int2d(Th)(gamma*zeta1*zeta2*psy1*v)
    -int2d(Th)(f*g(t-dt)*v)

    //+ on(1,3,4,5,7,8,9,10, u = 0); // Pour le maillage non uniforme. 
    + on(1,2,3,4, u = 0);

problem calculphix(phix,v)
    = int2d(Th)(phix*v/dt)
    - int2d(Th)(phi1x*v/dt)

    + int2d(Th)(zeta1*phix*v/2)
    + int2d(Th)(zeta1*phi1x*v/2)

    - int2d(Th)((zeta2-zeta1)*dx(u)*v/2)
    - int2d(Th)((zeta2-zeta1)*dx(u1)*v/2);

problem calculphiy(phiy,v)
    = int2d(Th)(phiy*v/dt)
    - int2d(Th)(phi1y*v/dt)

    + int2d(Th)(zeta2*phiy*v/2)
    + int2d(Th)(zeta2*phi1y*v/2)

    - int2d(Th)((zeta1-zeta2)*dy(u)*v/2)
    - int2d(Th)((zeta1-zeta2)*dy(u1)*v/2);

u0 = 0;
u1 = 0; //u0 + dt*vitesse
psy1 = 0;
phi1x = 0;
phi1y = 0;


calculphix;
calculphiy;
phi1y = phiy;
phi1x = phix;
psy = psy1 + dt*u1;
psy1 = psy;
int k = 3;
{
ofstream file("vitesseCTEgamma30eta0x.txt");
for(t = 2*dt; t < T + dt/2; t += dt){
    psy = psy1 + dt*u1;
    calculu;
    calculphix;
    calculphiy;
    psy1 = psy;
    phi1y = phiy;
    phi1x = phix;
    u0 = u1;
    u1 = u;
    file << u(0,54) << " " << u(-300,54) << " " << u(0,30) << " " << u(-300,30) << " ";
    file << u(0,-6) << " " << u(-300,-6) << " " << u(0,-60) << " " << u(-300,-60) << " ";
    file << t << "\n";
    
    if(k% 10 == 1){
        savevtk("Images/vitesseCTEgamma30eta0x"+(1000+k)+".vtu", Th, u, dataname="gammawave");
    }
    k++;

}
}